#!/usr/bin/python3

def vcf_filter_commands(bed,outname,snp_vcf = None,indel_vcf = None):
    # check if files exists
    if not Path(bed).exists():
        print(f'Invalid path for .bed file path: {bed}')
    if snp_vcf is None or not Path(snp_vcf).exists():
        print(f'Invalid path for SNP .vcf file, or argument not used: {snp_vcf}\n'
              f'Skipping SNP filtering.')
        snp_vcf = None
    if indel_vcf is None or not Path(indel_vcf).exists():
        print(f'Invalid path for INDEL .vcf file, or argument not used: {indel_vcf}\n'
              f'Skipping INDEL filtering.')
        indel_vcf = None
    if snp_vcf is None and indel_vcf is None:
        print('Missing both SNP and INDEL vcfs. Nothing to filter.')
        sys.exit()
    if snp_vcf is not None:
        if snp_vcf.endswith('.gz'):
            snp_input_arg = '--gzvcf'
        else:
            snp_input_arg = '--vcf'
        snp_filter_cmd = (f'echo filtering SNPs. This may take a while... \n'
                          f'vcftools {snp_input_arg} {snp_vcf} --bed {bed} --recode --recode-INFO-all --out {outname}_snp \n'
                          f'grep -v \'##\' {outname}_snp.recode.vcf > {outname}_snp.vcf \n'
                          f'rm {outname}_snp.recode.vcf \n'
                          f'echo "Success! Filtered SNPs saved as {outname}_snp.vcf"')
    else:
        snp_filter_cmd = ''
    if indel_vcf is not None:
        if indel_vcf.endswith('.gz'):
            indel_input_arg = '--gzvcf'
        else:
            indel_input_arg = '--vcf'
        indel_filter_cmd = (f'echo filtering INDELs. This may take a while... \n'
                            f'vcftools {indel_input_arg} {indel_vcf} --bed {bed} --recode --recode-INFO-all --out {outname}_indel \n'
                            f'grep -v \'##\' {outname}_indel.recode.vcf > {outname}_indel.vcf \n'
                            f'rm {outname}_indel.recode.vcf \n'
                            f'echo "Success! Filtered INDELs saved as {outname}_indel.vcf"')
    else:
        indel_filter_cmd = ''
    cmd = (f'echo "Loading module vcftools"\n'
           f'module load vcftools \n'
           f'{snp_filter_cmd}\n'
           f'{indel_filter_cmd}\n')
    return(cmd)

def read_vcf_line(file):
    if Path(file).suffix == '.gz':
        f = gzip.open(file)
    else:
        f = open(file, 'rb')
    while True:
        l = f.readline().decode().strip()
        if len(l) == 0:
            break
        yield(l)
    f.close()

def load_annotations(file):
    features = [list()]
    with open(file) as f:
        f.readline() # header
        # need columns 0,1,2,3,5
        while True:
            l = f.readline().strip()
            if len(l) == 0:
                break
            l = l.split('\t')
            features.append((l[0],l[1],int(l[2]),int(l[3]),l[5]))
    return(features)

def process_info(info, annotations: list):
    # target output: [#chr, pos, ref, alt, gene_name, features]
    chrom, pos = info[0], int(info[1])
    ref, alt = info[3], info[4]
    ints = [i for i in annotations if (i[0] == chrom) and (i[2] <= pos) and (i[3] >= pos)]
    features = list(set([i[1] for i in ints]))
    features.sort()
    features_str = ','.join(features)
    genes = list(set([i[4] for i in ints]))
    genes.sort()
    genes_str = ','.join(genes)
    return([chrom,str(pos),ref,alt,genes_str,features_str])


def parse_sample_info(val, form):
    form = form.split(':')
    val = val.split(':')
    info_dict = dict(zip(form,val))
    return(info_dict)

def process_vcf_table(vcf_file, outname, annotations:list):
    outfile = f'{outname}_genotypes.txt'
    o = open(outfile, 'w')
    vcf = read_vcf_line(vcf_file) # generater to read one line at a time
    # get header
    header = next(vcf)
    header = header.strip().split('\t')
    form_col = header.index('FORMAT')
    info_header = ['#chr', 'pos', 'ref', 'alt', 'gene_name', 'features']
    allele_header = header[9:]
    new_header = info_header + allele_header
    o.write('\t'.join(new_header) + '\n')
    # loop through the rest of the file
    while True:
        try:
            l = next(vcf)
        except StopIteration:
            break
        l = l.strip().split('\t')
        info, alleles = l[:9], l[9:]
        form = info[form_col]
        processed_info = process_info(info, annotations)
        processed_alleles = [str(parse_sample_info(a, form)['GT']) for a in alleles]
        new_row = processed_info + processed_alleles
        o.write('\t'.join(new_row) + '\n')
    o.close()
    return()

help_msg = '''
Usage: python process_vcf.py -a [annotation_table] -b [bed_file] -s [snp_calls] -i [indel_calls] -o [output]
Options:
    -a: annotation file generated by extract_gene_info.py
        Same as --annotation
    -b: bed file with genomic coordinates
        Same as --bed
    -s: SNP calls file, can be in gzip format
        Same as --snps
    -i: INDEL calls file, can be in gzip format 
        Same as --indels
    -o: output file name
        Same as --output
'''

def main():
    arg_list = sys.argv[1:]
    short_opts = 'a:b:s:i:o:h'
    long_opts = ['help','annotation','bed','snps','indels','output']
    
    try:
        opt_list = getopt.getopt(arg_list, short_opts, long_opts)[0]
    except getopt.error as error:
        sys.exit(error)
    
    if (('--help','') in opt_list) or (('-h','') in opt_list) or len(arg_list) == 0:
        print(help_msg)
        sys.exit(0)

    annotations, bed_file,outfile = None, None, None
    snp_file,indel_file = None, None
    for current_arg, current_val in opt_list:
        if current_arg in ['-a','--annotations']:
            annotations = current_val
            if not Path(annotations).exists():
                sys.exit(f'Cannot find file: {annotations}')
        elif current_arg in ['-b','--bed']:
            bed_file = current_val
            if not Path(bed_file).exists():
                sys.exit(f'Cannot find file: {bed_file}')
        elif current_arg in ['-o','--output']:
            outfile = current_val
        elif current_arg in ['-s','--snps']:
            snp_file = current_val
            if not Path(snp_file).exists():
                sys.exit(f'Cannot find file: {snp_file}')
        elif current_arg in ['-i','--indels']:
            indel_file = current_val
            if not Path(indel_file).exists():
                sys.exit(f'Cannot find file: {indel_file}')
                
    if all([snp_file is None, indel_file is None]):
        print('Need at least one of snps or indel files (-s or -i options).')

    if any([annotations is None,bed_file is None, outfile is None]):
        print('Missing at least one required argument (-a, -b, and -o options).')
    
    print('Filtering vcfs with bed file')
    cmd = vcf_filter_commands(bed_file,outfile,snp_file,indel_file)
    os.system(cmd)
    filtered_snps = f'{outfile}_snp.vcf'
    filtered_indels = f'{outfile}_indel.vcf'
    
    annotation_list = load_annotations(annotations)
    
    if snp_file is not None:
        print(f'Processing SNP vcf ({filtered_snps}) to genotype table ({outfile}_snp_genotypes.txt)...')
        process_vcf_table(filtered_snps, f'{outfile}_snp', annotation_list)
        print('Finished processing SNPs!')
    if indel_file is not None:
        print(f'Processing INDEL vcf ({filtered_indels}) to genotype table ({outfile}_indel_genotypes.txt)...')
        process_vcf_table(filtered_indels, f'{outfile}_indel', annotation_list)
        print('Finished processing INDELs!')
    
if __name__ == '__main__':
    import os,sys,getopt,gzip
    from pathlib import Path
    main()